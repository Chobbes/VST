HOW TO BUILD:

0.  Make sure you have the right version of Coq.
  grep ^COQVERSION Makefile
  will tell you which versions are compatible.

METHOD A [recommended] with external CompCert build;
    see also EXTERNAL COMPCERT below.
1. Examine the file vst/compcert/VERSION, download that version
 of CompCert from compcert.inria.fr into the same parent directory
 next to your unpack of vst, then in the compcert install do: 
     make;  make clightgen
 [recommended: make sure the executable compcert/clightgen
  is on your searchpath.]
1a. FOR COMPCERT 2.5 ONLY:
  The file exportclight/ExportClight.ml distributed in CompCert 2.5
  does not build.  Copy VST/compcert/exportclight/ExportClight.ml
  into CompCert/exportclight before building clightgen.
  [This should be fixed in CompCert 2.5.1 and later.]
2. In the vst directory, create a file CONFIGURE containing exactly the text:
    COMPCERT=../compcert
3. In the vst directory,  
    make
METHOD B [alternate] with internal CompCert
1. Remove (if present) the file CONFIGURE
2. In the vst/compcert directory,
    ./make
3. In the vst directory,
    make
[Note: this alternate method will not build compcert/clightgen,
  so you will not be able to translate .c files into .v files.]

ORGANIZATION:
The Verified Software Toolchain is organized into separate subprojects,
each in a separate directory:

msl -   Mechanized Software Library
examples - examples of how to use the msl
compcert -   front end of the CompCert compiler, specification of C light
sepcomp - the theory and practice of how to specify shared-memory interaction 
veric -  program logic (and soundness proof) for Verifiable C
floyd -  tactics for applying the separation logic
progs -  sample programs, with their verifications

The dependencies are:

msl:   # no dependency on other directories
examples: msl
compcert: # no dependency on other directories
sepcomp: compcert
veric:  msl compcert sepcomp
floyd: msl sepcomp compcert veric
progs: msl sepcomp compcert veric floyd

In general, we Import using "-I" (nonrecursive) instead of "-R"
(recursive).  This means modules need to be named using qualified names.
Thus, in "veric/expr.v" we write "Require Import msl.msl_standard"
instead of "Require Import msl_standard".  To make this work, the loadpaths
need to be set up properly; the file ".loadpath" (built by "make .loadpath")
shows what -I includes to use.

USING PROOF GENERAL AND COQIDE:
To use either of these interactive development environments you will
need to have the right load path.  This can be done by command-line
arguments to coqide or coqtop.  The precise command-line arguments
to use when running CoqIDE or coqc are in the file .loadpath, which 
is constructed automatically when you do "make".  For example:    
  coqide `cat .loadpath`  # will run coqide with the right options.
  coqc `cat .loadpath`    # will run coqc with the right options.

There are three methods in which to configure Proof General. 
1) On Linux systems, use the provided vst/pg script, as follows:
     ./pg
   This script is adapted from the CompCert project. It starts 
   emacs+Proof General with the load path arguments specified in 
   the generated .loadpath file.
2) On other systems, such as Windows, it may be necessary to specify the
   load path by hand in your .emacs file, as follows:
     (setq coq-prog-args 
       '("-I" "<your-vst-path>/msl" "-as" "msl"
         "-I" "<your-vst-path>/sepcomp" "-as" "sepcomp"
         "-I" "<your-vst-path>/veric" "-as" "veric"
         "-I" "<your-vst-path>/floyd" "-as" "floyd"
         "-I" "<your-vst-path>/progs" "-as" "progs"
         "-R" "<your-vst-path>/compcert" "-as" "compcert"))
3) The (stable) development prerelease of ProofGeneral v4.3pre131011
   can read the _CoqProject file in the base of the VST directory. To
   enable the feature set the emacs variable coq-use-project-file.
   You should now be able to open emacs normally and step into any
   file in VST.

NEW DIRECTORIES:
If you add a new directory, you will probably want to augment the loadpath
so that qualified names work right.  For example:
  coqc `cat .loadpath` -I new -as new new/myfile.v 
The Makefile automatically creates the .loadpath file
with the subdirectories that it knows about.

EXTERNAL COMPCERT: 
The VST imports from the CompCert verified C compiler, the definition
of C light syntax and operational semantics.  For the convenience of
VST users, the vst/compcert directory is a copy (with permission) of
the front-end portions of compcert.  We use compcert's own Makefile to
build it.  However, our "Makefile.clight" modifies CompCert's
makefile, so as to build only the front end.
  You may choose to ignore the vst/compcert directory and have
the VST import from a build of compcert that you have installed in
another directory, for example,  ../compcert.
To do this, create a file CONFIGURE containing a definition such as,
  COMPCERT=../compcert
Make sure that you have the right version of CompCert!  Check
the file vst/compcert/VERSION to be sure.
Warning:  On cygwin, the definition  COMPCERT=../compcert
works fine, but an absolute pathname such as  COMPCERT=/home/user/compcert
does not work, as coqdep breaks for some reason.

